# client.py
import time, socket, sys,random,uuid
def puf(num):
    return int(num*7/13 + 11)

print("\nWelcome to Setup phase of RFID\n")
print("Initialising....\n")
time.sleep(1)

s = socket.socket()
shost = socket.gethostname()
ip = socket.gethostbyname(shost)
print(shost, "(", ip, ")\n")
host = input(str("Enter server address: "))
name = "Tag"
port = 1234
print("\nTrying to connect to ", host, "(", port, ")\n")
time.sleep(1)
s.connect((host, port))
print("Connected...\n")

s.send(name.encode())
s_name = s.recv(1024)
s_name = s_name.decode()
print(s_name, "has joined the Socket\n")

######################################################################################################################################
#ci-ri response pair
ci = s.recv(1024)
ci = ci.decode()
print("Server has sent Challenge Ci: ", ci)
######################################################################################################################################
#PUF computation
ri = int(ci)
ri = str(puf(ri))#puf
######################################################################################################################################
#send response
s.send(ri.encode())
cem = []
for i in range(0,50):
    challenge = s.recv(1024)
    challenge = challenge.decode()
    cem.append(int(challenge))
    #PUF code
    response = int(challenge)
    response = str(puf(response)) #add puf
    s.send(response.encode())
print("Emergency challenge generated by Server =\n",cem)
######################################################################################################################################    
#Receive msg2 from server
msg2tid = s.recv(1024)
msg2tid = msg2tid.decode()
print("TID has received from server= ",msg2tid)
pid = []
for i in range(0,50):
    msg2pid = s.recv(1024)
    msg2pid = msg2pid.decode()
    pid.append(msg2pid) 
print("PID has received from server= ",pid)
f = open("tagBuffer.txt", "w")
f.write(msg2tid)
f.write("\n")
for i in range(0,50):
    f.write(pid[i])
    f.write("\n")
f.close()
######################################################################################################################################

